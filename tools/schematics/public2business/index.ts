import { join, Path, relative } from '@angular-devkit/core';
import { FileEntry, Rule, Tree } from '@angular-devkit/schematics';

import { formatBazelFile } from '../bazel/format-bazel-file';

const AUTOGENERATED_FILES = {
  AUTOGENERATED_DO_NOT_MODIFY: 'See schematics/public2business',
  '.gitignore': '*',
};

export const MODULES = [
  'accordion',
  'autocomplete',
  'badge',
  'breadcrumb',
  'datepicker',
  'dropdown',
  'field',
  'form-field',
  'file-selector',
  'input',
  'loading',
  'option',
  'pagination',
  'radio-button',
  'select',
  'tabs',
  'textarea',
  'textexpand',
  'time-input',
  'usermenu',
];

export function public2business(options: { filter?: string }): Rule {
  return (tree: Tree) => {
    MODULES.filter((m) => !options || !options.filter || m === options.filter).forEach((m) =>
      copyAndAdaptPublicModule(m)
    );

    function copyAndAdaptPublicModule(moduleName: string) {
      const publicDir = tree.getDir(`src/angular-public/${moduleName}`);
      const businessDir = tree.getDir(`src/angular-business/${moduleName}`);
      // Clear deleted files
      businessDir.visit((path) => {
        if (
          path.endsWith('.spec.ts') ||
          (Object.keys(AUTOGENERATED_FILES).every((k) => !path.endsWith(k)) &&
            !tree.exists(join(publicDir.path, relative(businessDir.path, path))))
        ) {
          tree.delete(path);
        }
      });
      publicDir.visit((path, entry) => {
        if (entry && !path.endsWith('.spec.ts')) {
          let targetPath: string = join(businessDir.path, relative(publicDir.path, path));
          if (targetPath.endsWith('.business.html')) {
            targetPath = targetPath.replace('.business.html', '.html');
          }
          const content = adaptFile(entry);

          if (hasBusinessVariant(path)) {
            // Do nothing
          } else if (!tree.exists(targetPath)) {
            tree.create(targetPath, content);
          } else if (tree.read(targetPath)!.toString() !== content) {
            tree.overwrite(targetPath, content);
          }
        }
      });
      Object.entries(AUTOGENERATED_FILES).forEach(([name, content]) => {
        const filePath = join(businessDir.path, name);
        if (!tree.exists(filePath)) {
          tree.create(filePath, content);
        }
      });
    }

    function hasBusinessVariant(path: Path) {
      return (
        path.endsWith('component.html') && tree.exists(path.replace('.html', '.business.html'))
      );
    }

    function adaptFile(entry: Readonly<FileEntry>) {
      const autogenerated = '/** Autogenerated by public2business schematic. DO NOT CHANGE! */\n';
      const content = entry.content.toString('utf8');
      if (['md', 'json', 'html'].some((e) => entry.path.endsWith(`.${e}`))) {
        return content.replace('(/public/', '(/business/');
      } else if (entry.path.endsWith('.scss')) {
        return `${autogenerated}$sbbBusiness: true;\n\n${content}`;
      } else if (entry.path.endsWith('.ts')) {
        return `${autogenerated}/* tslint:disable */\n${content.replace(
          'const isBusiness = false;',
          'const isBusiness = true;'
        )}`.replace(/@sbb-esta\/angular-public/g, '@sbb-esta/angular-business');
      } else if (entry.path.endsWith('.bazel')) {
        const file = `# Autogenerated by public2business schematic. DO NOT CHANGE!\n${content}`
          .replace(/public\//g, 'business/')
          .replace(/    "ng_test_library",\n/g, '')
          .replace(/    "ng_web_test_suite",\n/g, '')
          .replace(
            /deps = \[\n([ ]+)(("[^"]+",\n[ ]+){2,})\]/gm,
            (_f: string, space: string, deps: string) => {
              let newDeps = 'deps = [\n';
              deps
                .match(/("[^"]+")/g)!
                .sort()
                .forEach((d) => (newDeps += `${space}${d},\n`));
              return `${newDeps}${space.substring(4)}]`;
            }
          )
          .replace(/\nng_test_library\([\w\W]+?ng_web_test_suite\([\w\W]+?(\r\n|\r|\n)\)\n/m, '');
        return formatBazelFile(relative(tree.root.path, entry.path), file);
      } else {
        return `${autogenerated}${content}`;
      }
    }
  };
}
